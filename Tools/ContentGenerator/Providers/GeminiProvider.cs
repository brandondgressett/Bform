using System;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using BFormDomain.Tools.ContentGenerator.Abstractions;

namespace BFormDomain.Tools.ContentGenerator.Providers
{
    public class GeminiProvider : ILlmProvider
    {
        private readonly HttpClient _httpClient;
        private readonly GeminiConfiguration _configuration;
        private readonly ILogger<GeminiProvider> _logger;

        public string Name => "Gemini";

        public GeminiProvider(HttpClient httpClient, IOptions<GeminiConfiguration> configuration, ILogger<GeminiProvider> logger)
        {
            _httpClient = httpClient;
            _configuration = configuration.Value;
            _logger = logger;
        }

        public async Task<string> GenerateContentAsync(string prompt, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrEmpty(_configuration.ApiKey))
            {
                throw new InvalidOperationException("Gemini API key is not configured. Please set GEMINI_API_KEY environment variable.");
            }

            var requestUrl = $"https://generativelanguage.googleapis.com/v1beta/models/{_configuration.Model}:generateContent?key={_configuration.ApiKey}";

            var requestBody = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = prompt }
                        }
                    }
                },
                generationConfig = new
                {
                    temperature = _configuration.Temperature,
                    maxOutputTokens = _configuration.MaxOutputTokens
                }
            };

            var json = JsonConvert.SerializeObject(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            try
            {
                var response = await _httpClient.PostAsync(requestUrl, content, cancellationToken);
                var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);

                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogError("Gemini API error: {StatusCode} - {Content}", response.StatusCode, responseContent);
                    throw new HttpRequestException($"Gemini API returned {response.StatusCode}: {responseContent}");
                }

                var responseJson = JObject.Parse(responseContent);
                var generatedText = responseJson["candidates"]?[0]?["content"]?["parts"]?[0]?["text"]?.ToString();

                if (string.IsNullOrEmpty(generatedText))
                {
                    throw new InvalidOperationException("No content generated by Gemini API");
                }

                // Extract JSON from the response if it contains markdown code blocks
                var extractedJson = ExtractJsonFromResponse(generatedText);
                return extractedJson;
            }
            catch (TaskCanceledException)
            {
                _logger.LogWarning("Gemini API request was cancelled");
                throw;
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError(ex, "HTTP error calling Gemini API");
                throw;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error calling Gemini API");
                throw;
            }
        }

        private string ExtractJsonFromResponse(string response)
        {
            // Try to extract JSON from markdown code blocks
            var jsonStartMarkers = new[] { "```json", "```" };
            var jsonEndMarker = "```";

            foreach (var startMarker in jsonStartMarkers)
            {
                var startIndex = response.IndexOf(startMarker);
                if (startIndex >= 0)
                {
                    startIndex += startMarker.Length;
                    var endIndex = response.IndexOf(jsonEndMarker, startIndex);
                    if (endIndex > startIndex)
                    {
                        var json = response.Substring(startIndex, endIndex - startIndex).Trim();
                        try
                        {
                            // Validate it's proper JSON
                            JToken.Parse(json);
                            return json;
                        }
                        catch
                        {
                            // Continue trying other extraction methods
                        }
                    }
                }
            }

            // Try to find JSON by looking for opening and closing braces
            var firstBrace = response.IndexOf('{');
            var lastBrace = response.LastIndexOf('}');
            if (firstBrace >= 0 && lastBrace > firstBrace)
            {
                var json = response.Substring(firstBrace, lastBrace - firstBrace + 1);
                try
                {
                    JToken.Parse(json);
                    return json;
                }
                catch
                {
                    // Fall through to return original
                }
            }

            // Return the original response if no JSON found
            return response;
        }
    }
}